@page "/beneficiarios"
@using Fundacion.Shared.Entidades
@using Fundacion.WEB.Repositories
@using Fundacion.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> Beneficiarios
            <a class="btn btn-primary btn-sm float-end" href="/beneficiarios/create"><i class="bi bi-plus-circle"/>Nuevo Beneficiario</a>

        </span>
</div>

    <div class="card-body">

<GenericList MyList="Beneficiarios">


            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <td></td>
                            <td>
                                Nombre
                            </td>
                            <td>
                                Edad
                            </td>
                            <td>
                                Información
                            </td>
                            <td>
                                Programa
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                @foreach (var item in Beneficiarios!)
                {
                    <tr>
                        <td>
                             <a href="/beneficiarios/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                             <button @onclick=@(() => DeleteAsycn(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill"/> Borrar</button>
                        </td>
                        
                        <td>
                            @item.Nombre
                        </td>
                        <td>
                            @item.Edad
                        </td>
                        <td>
                            @item.Informacion
                        </td>
                        
                            <td>
                            @item.Programa
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
    </div>
</div>


@code {
    public List<Beneficiario> Beneficiarios { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Beneficiario>>("api/beneficiarios");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Beneficiarios = responseHttp.Response;
    }

   

        private async Task DeleteAsycn(Beneficiario beneficiario)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar el beneficiario: {beneficiario.Nombre}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Beneficiario>($"api/beneficiarios/{beneficiario.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                   navigationManager.NavigateTo("beneficiarios");
                }
                else
                {
                    var mensajeError = await responseHttp.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                }
                return;
            }

            await LoadAsync();
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
        }
    
}