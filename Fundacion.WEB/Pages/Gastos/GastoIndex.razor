@page "/gastos"
@using Fundacion.Shared.Entidades
@using Fundacion.WEB.Repositories
@using Fundacion.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> Gastos
            <a class="btn btn-primary btn-sm float-end" href="/gastos/create"><i class="bi bi-plus-circle" />Nuevo Gasto</a>

        </span>
    </div>

    <div class="card-body">

        <GenericList MyList="Gastos">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <td></td>
                            <td>
                                Id
                            </td>
                            <td>
                                Descripción
                            </td>
                            <td>
                                Monto
                            </td>
                            <td>
                                Fecha
                            </td>
                            <td>
                                Categoría
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Gastos!)
                        {
                            <tr>
                                <td>
                                    <a href="/gastos/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                                    <button @onclick=@(() => DeleteAsycn(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill" /> Borrar</button>
                                </td>

                                <td>
                                    @item.Id
                                </td>
                                <td>
                                    @item.Descripcion
                                </td>
                                <td>
                                    @item.Monto
                                </td>
                                <td>
                                    @item.Fecha
                                </td>

                                <td>
                                    @item.Categoria
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
</div>


@code {
    public List<Gasto> Gastos { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Gasto>>("api/gastos");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Gastos = responseHttp.Response;
    }



    private async Task DeleteAsycn(Gasto gasto)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmaci n",
                Text = $" Estas seguro de querer borrar el gasto: {gasto.Descripcion}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Gasto>($"api/gastos/{gasto.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("gastos");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }

}

